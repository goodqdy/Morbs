56,58d55
< //mobileDomains:
< import android.os.Bundle;
< 
71,74d67
< 	//mobileDomains: central place to store origin policies
<     private Bundle allowedSenderOrigins = new Bundle();
<     private Bundle allowedRecipientOrigins = new Bundle();
< 
151,462d143
<     //mobileDomains: 
<     @Override
<     public void setOriginPolicy(int cmd,String targetOrigin,String allowedOrigins,String entryPoint) {
< 		if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::setOriginPolicy(cmd="+cmd+",targetOrigin='"+targetOrigin+"',allowedOrigins='"+allowedOrigins+"',entryPoint='"+entryPoint+"')");
< 		switch (cmd) {
< 			case SPECIFY_SENDER_ORIGINS_WEBVIEWCLIENT: {
< 				Bundle b = allowedSenderOrigins.getBundle("webviewclient");
< 				Bundle record = b.getBundle(targetOrigin); //look up the record by targetOrigin
< 				if (record == null) { //the record does not exist, we create one
< 					record = new Bundle();
< 					b.putBundle(targetOrigin,record);
< 				}
< 				record.putString("allowedSenderOrigins",allowedOrigins);
< 				record.putBundle("decodedAllowedSenderOrigins",decodeOriginPolicy(allowedOrigins));
< 				break;
< 			}
< 			case SPECIFY_SENDER_ORIGINS_INTENT: {
< 				Bundle b = allowedSenderOrigins.getBundle("intent");
< 				Bundle record = b.getBundle(targetOrigin); //look up the record by targetOrigin
< 				if (record == null) { //the record does not exist, we create one
< 					record = new Bundle();
< 					b.putBundle(targetOrigin,record);
< 				}
< 				Bundle policy = new Bundle();
< 				record.putBundle(entryPoint,policy); //entryPoint is activity class name
< 				policy.putString("allowedSenderOrigins",allowedOrigins);
< 				policy.putBundle("decodedAllowedSenderOrigins",decodeOriginPolicy(allowedOrigins));
< 				break;
< 			}
< 			case SPECIFY_SENDER_ORIGINS_SCHEME: {
< 				Bundle b = allowedSenderOrigins.getBundle("scheme");
< 				Bundle record = b.getBundle(targetOrigin); //look up the record by targetOrigin
< 				if (record == null) { //the record does not exist, we create one
< 					record = new Bundle();
< 					b.putBundle(targetOrigin,record);
< 				}
< 				Bundle policy = new Bundle();
< 				record.putBundle(entryPoint,policy); //entryPoint is the scheme
< 				policy.putString("allowedSenderOrigins",allowedOrigins);
< 				policy.putBundle("decodedAllowedSenderOrigins",decodeOriginPolicy(allowedOrigins));
< 				break;
< 			}
< 			case SPECIFY_SENDER_ORIGINS_WEB: {
< 				Bundle b = allowedSenderOrigins.getBundle("web");
< 				Bundle record = b.getBundle(targetOrigin); //look up the record by targetOrigin
< 				if (record == null) { //the record does not exist, we create one
< 					record = new Bundle();
< 					b.putBundle(targetOrigin,record);
< 				}
< 				Bundle policy = new Bundle();
< 				record.putBundle(entryPoint,policy); //entryPoint is the app package ID
< 				policy.putString("allowedSenderOrigins",allowedOrigins);
< 				policy.putBundle("decodedAllowedSenderOrigins",decodeOriginPolicy(allowedOrigins));
< 				break;
< 			}
< 			case SPECIFY_RECIPIENT_ORIGINS_WEBVIEW: {
< 				Bundle b = allowedRecipientOrigins.getBundle("webview");
< 				Bundle record = b.getBundle(targetOrigin); //look up the record by targetOrigin
< 				if (record == null) { //the record does not exist, we create one
< 					record = new Bundle();
< 					b.putBundle(targetOrigin,record);
< 				}
< 				record.putString("allowedRecipientOrigins",allowedOrigins);
< 				record.putBundle("decodedAllowedRecipientOrigins",decodeOriginPolicy(allowedOrigins));
< 				break;
< 			}
< 			case SPECIFY_RECIPIENT_ORIGINS_INTENT:	{			
< 				Bundle b = allowedRecipientOrigins.getBundle("intent");
< 				Bundle record = b.getBundle(targetOrigin); //look up the record by targetOrigin
< 				if (record == null) { //the record does not exist, we create one
< 					record = new Bundle();
< 					b.putBundle(targetOrigin,record);
< 				}
< 				Bundle policy = new Bundle();
< 				record.putBundle(entryPoint,policy); //entryPoint is activity class name
< 				policy.putString("allowedRecipientOrigins",allowedOrigins);
< 				policy.putBundle("decodedAllowedRecipientOrigins",decodeOriginPolicy(allowedOrigins));
< 				break;
< 			}
< 			case SPECIFY_RECIPIENT_ORIGINS_SCHEME: {
< 				Bundle b = allowedRecipientOrigins.getBundle("scheme");
< 				Bundle record = b.getBundle(targetOrigin); //look up the record by targetOrigin
< 				if (record == null) { //the record does not exist, we create one
< 					record = new Bundle();
< 					b.putBundle(targetOrigin,record);
< 				}
< 				Bundle policy = new Bundle();
< 				record.putBundle(entryPoint,policy); //entryPoint is the scheme
< 				policy.putString("allowedRecipientOrigins",allowedOrigins);
< 				policy.putBundle("decodedAllowedRecipientOrigins",decodeOriginPolicy(allowedOrigins));
< 				break;
< 			}
< 			case SPECIFY_RECIPIENT_ORIGINS_WEB: {
< 				Bundle b = allowedRecipientOrigins.getBundle("web");
< 				Bundle record = b.getBundle(targetOrigin); //look up the record by targetOrigin
< 				if (record == null) { //the record does not exist, we create one
< 					record = new Bundle();
< 					b.putBundle(targetOrigin,record);
< 				}
< 				Bundle policy = new Bundle();
< 				record.putBundle(entryPoint,policy); //entryPoint is the app package ID
< 				policy.putString("allowedRecipientOrigins",allowedOrigins);
< 				policy.putBundle("decodedAllowedRecipientOrigins",decodeOriginPolicy(allowedOrigins));
< 				break;
< 			}
< 		}
<     }
< 
< 	private Bundle decodeOriginPolicy(String allowedOrigins) {
< 		Bundle result = new Bundle();
< 		//currently, we assume there is only letters, number, '.', ',', "://", and '*' in allowedOrigins.
< 		//split with ','
< 		String[] a = allowedOrigins.split(",");
< 		int countOfreg = 0; //count of regular expressions
< 		for (int i=0;i<a.length;i++) {
< 			if (!a[i].contains("*")) { //it is a concrete domain name
< 				result.putBoolean(a[i],true);
< 			} else { //it is a regular expression
< 				countOfreg++;
< 			}
< 		}
< 
< 		//create regular expression string array
< 		if (countOfreg > 0) {
< 			String[] reg = new String[countOfreg];
< 			countOfreg = 0;
< 			for (int i=0;i<a.length;i++) {
< 				if (a[i].contains("*")) { //it is a regular expression
< 					reg[countOfreg++] = a[i];
< 				}
< 			}
< 			result.putStringArray("regularExpressions",reg);
< 		}
< 		return result;
< 	}
< 
<     @Override
<     public boolean checkOriginPolicy(int cmd,String senderOrigin,String recipientOrigin,String entryPoint){
< 		if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::checkOriginPolicy(cmd="+cmd+",senderOrigin='"+senderOrigin+"',recipientOrigin='"+recipientOrigin+"',entryPoint='"+entryPoint+"')");
< 		switch (cmd) {
< 			case CHECK_SENDER_WEBVIEWCLIENT: {
< 				Bundle b = allowedSenderOrigins.getBundle("webviewclient");
< 				Bundle record = b.getBundle(recipientOrigin); //look up the record by recipientOrigin
< 				if (record != null) { //the record exists
< 					Bundle decodedAllowedSenderOrigins = record.getBundle("decodedAllowedSenderOrigins");
< 					if (decodedAllowedSenderOrigins.containsKey(senderOrigin)) { //sender origin contained in the deocoded allowed origins as concrete value
< 						return true;
< 					} else {
< 						//todo: check senderOrigin against regular expressions
< 
< 						//regular expression check fails
< 						if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::messages from "+senderOrigin+" to "+recipientOrigin+":webviewclient should be blocked according to recipient policy");
< 						return false;
< 					}
< 				}
< 				//when no policy exists, we allow
< 				return true;
< 			}
< 			case CHECK_SENDER_INTENT: {
< 				Bundle b = allowedSenderOrigins.getBundle("intent");
< 				Bundle record = b.getBundle(recipientOrigin); //look up the record by recipientOrigin
< 				if (record != null) { //the record exists
< 					record = record.getBundle(entryPoint);
< 					if (record != null) {
< 						Bundle decodedAllowedSenderOrigins = record.getBundle("decodedAllowedSenderOrigins");
< 						if (decodedAllowedSenderOrigins.containsKey(senderOrigin)) { //sender origin contained in the deocoded allowed origins as concrete value
< 							return true;
< 						} else {
< 							//todo: check senderOrigin against regular expressions
< 
< 							//regular expression check fails
< 							if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::messages from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint+" should be blocked according to recipient policy");
< 							return false;
< 						}
< 					}
< 				}
< 				return true;
< 			}
< 			case CHECK_SENDER_SCHEME: {
< 				Bundle b = allowedSenderOrigins.getBundle("scheme");
< 				Bundle record = b.getBundle(recipientOrigin); //look up the record by recipientOrigin
< 				if (record != null) { //the record exists
< 					record = record.getBundle(entryPoint);
< 					if (record != null) {
< 						Bundle decodedAllowedSenderOrigins = record.getBundle("decodedAllowedSenderOrigins");
< 						if (decodedAllowedSenderOrigins.containsKey(senderOrigin)) { //sender origin contained in the deocoded allowed origins as concrete value
< 							return true;
< 						} else {
< 							//todo: check senderOrigin against regular expressions
< 
< 							//regular expression check fails
< 							if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::messages from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint+" should be blocked according to recipient policy");
< 							return false;
< 						}
< 					}
< 				}
< 				return true;
< 			}
< 			case CHECK_SENDER_WEB: {
< 				Bundle b = allowedSenderOrigins.getBundle("web");
< 				Bundle record = b.getBundle(recipientOrigin); //look up the record by recipientOrigin
< 				if (record != null) { //the record exists
< 					record = record.getBundle(entryPoint);
< 					if (record != null) {
< 						Bundle decodedAllowedSenderOrigins = record.getBundle("decodedAllowedSenderOrigins");
< 						if (decodedAllowedSenderOrigins.containsKey(senderOrigin)) { //sender origin contained in the deocoded allowed origins as concrete value
< 							return true;
< 						} else {
< 							//todo: check senderOrigin against regular expressions
< 
< 							//regular expression check fails
< 							if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::messages from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint+" should be blocked according to recipient policy");
< 							return false;
< 						}
< 					}
< 				}
< 				return true;
< 			}
< 			case CHECK_RECIPIENT_WEBVIEW: {
< 				Bundle b = allowedRecipientOrigins.getBundle("webview");
< 				Bundle record = b.getBundle(senderOrigin); //look up the record by senderOrigin
< 				if (record != null) {
< 					Bundle decodedAllowedRecipientOrigins = record.getBundle("decodedAllowedRecipientOrigins");
< 					if (decodedAllowedRecipientOrigins.containsKey(recipientOrigin)) { //recipient origin contained in the deocoded allowed origins as concrete value
< 						return true;
< 					} else {
< 						//todo: check recipientOrigin against regular expressions
< 
< 						//regular expression check fails
< 						if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::messages from "+senderOrigin+" to "+recipientOrigin+":webview should be blocked according to sender policy");
< 						return false;
< 					}
< 				}
< 				return true;
< 			}
< 			case CHECK_RECIPIENT_INTENT:	{			
< 				Bundle b = allowedRecipientOrigins.getBundle("intent");
< 				Bundle record = b.getBundle(senderOrigin); //look up the record by senderOrigin
< 				if (record != null) { //the record exists
< 					record = record.getBundle(entryPoint);
< 					if (record != null) {
< 						Bundle decodedAllowedRecipientOrigins = record.getBundle("decodedAllowedRecipientOrigins");
< 						if (decodedAllowedRecipientOrigins.containsKey(recipientOrigin)) { //recipient origin contained in the deocoded allowed origins as concrete value
< 							return true;
< 						} else {
< 							//todo: check recipientOrigin against regular expressions
< 
< 							//regular expression check fails
< 							if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::messages from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint+" should be blocked according to sender policy");
< 							return false;
< 						}
< 					}
< 				}
< 				return true;
< 			}
< 			case CHECK_RECIPIENT_SCHEME: {
< 				Bundle b = allowedRecipientOrigins.getBundle("scheme");
< 				Bundle record = b.getBundle(senderOrigin); //look up the record by senderOrigin
< 				if (record != null) { //the record exists
< 					record = record.getBundle(entryPoint);
< 					if (record != null) {
< 						Bundle decodedAllowedRecipientOrigins = record.getBundle("decodedAllowedRecipientOrigins");
< 						if (decodedAllowedRecipientOrigins.containsKey(recipientOrigin)) { //recipient origin contained in the deocoded allowed origins as concrete value
< 							return true;
< 						} else {
< 							//todo: check recipientOrigin against regular expressions
< 
< 							//regular expression check fails
< 							if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::messages from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint+" should be blocked according to sender policy");
< 							return false;
< 						}
< 					}
< 				}
< 				return true;
< 			}
< 			case CHECK_RECIPIENT_WEB: {
< 				Bundle b = allowedRecipientOrigins.getBundle("web");
< 				Bundle record = b.getBundle(senderOrigin); //look up the record by senderOrigin
< 				if (record != null) { //the record exists
< 					record = record.getBundle(entryPoint);
< 					if (record != null) {
< 						if (!recipientOrigin.startsWith("app://")) { //recipient is not an app. It should be a web domain or data scheme
< 							if (recipientOrigin.startsWith("http://") || recipientOrigin.startsWith("https://")) { //it is web domain
< 								//todo: handle web Url as scheme to launch app case
< 								return true; //we let it go because it is not our responsibility to handle it
< 							} else if (recipientOrigin.indexOf("://") < 0) { //it is a scheme
< 								if (schemeToApp.containsKey(recipientOrigin)) { //there is a map between this scheme and an app
< 									recipientOrigin = "app://" + schemeToApp.getString(recipientOrigin); //now recipientOrigin is the app
< 								}
< 							}
< 						}
< 						Bundle decodedAllowedRecipientOrigins = record.getBundle("decodedAllowedRecipientOrigins");
< 						if (decodedAllowedRecipientOrigins.containsKey(recipientOrigin)) { //recipient origin contained in the deocoded allowed origins as concrete value
< 							return true;
< 						} else {
< 							//todo: check recipientOrigin against regular expressions
< 
< 							//regular expression check fails
< 							if (Thread.debugForMobileDomains) Log.d("mobileDomains","ApplicationPackageManager::messages from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint+" should be blocked according to sender policy");
< 							Log.d("mobileDomains","Error: the message from "+senderOrigin+" to "+recipientOrigin+" is blocked according to sender policy");
< 							//throw new Exception("Error: the message from "+senderOrigin+" to "+recipientOrigin+" is blocked according to sender policy");
< 							return false;
< 						}
< 					}
< 				}
< 				return true;
< 			}
< 		}
< 		//todo: throw exception because the execution should not come here
< 		return false;
<     }
< 
1125,1134d805
< 
< 		//mobileDomains: init allowedSenderOrigins and allowedRecipientOrigins
< 		allowedSenderOrigins.putBundle("webviewclient",new Bundle());
< 		allowedSenderOrigins.putBundle("intent",new Bundle());
< 		allowedSenderOrigins.putBundle("scheme",new Bundle());
< 		allowedSenderOrigins.putBundle("web",new Bundle());
< 		allowedRecipientOrigins.putBundle("webview",new Bundle());
< 		allowedRecipientOrigins.putBundle("intent",new Bundle());
< 		allowedRecipientOrigins.putBundle("scheme",new Bundle());
< 		allowedRecipientOrigins.putBundle("web",new Bundle());
