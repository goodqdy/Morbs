22,24d21
< //mobileDomains:
< import android.content.pm.ResolveInfo;
< 
883,886d879
< 		//mobileDomains: check origin policy
< 		/*Log.d("mobileDomains","Activity::onCreate()");
< 		performDomainChecks();*/
< 
3382,3399d3374
< 		//mobileDomains: performance test
< 		Log.d("mobileDomains","Activity::startActivity/startActivityForResult is called at "+System.nanoTime());
< 		Thread.intentStartTime = System.nanoTime();
< 
< 		//mobileDomains: retrieve policy from argument provided by app developer
< 		PackageManager pm = getPackageManager();
< 		String senderOrigin = intent.getOrigin();
< 		if (options != null && options.containsKey("allowedOrigins")) {
< 		//if (options.containsKey("allowedOrigins")) {
< 			String allowedRecipientOrigins = options.getString("allowedOrigins"); //allowed recipient origins
< 			intent.setAllowedRecipientOrigins(allowedRecipientOrigins); //the policy will go with the intent
< 		}
< 		if (!performDomainChecksOnIntent(intent)) return;
< 
< 		Thread.intentCheckEndTime = System.nanoTime();
< 		Log.d("mobileDomains","Activity::intent/scheme check ends at "+Thread.intentCheckEndTime);
< 		int tt = 0; //comment/uncomment for every build
< 
5134,5154d5108
< 		//mobileDomains: performance test
< 		Thread.intentEndTime = System.nanoTime();
< 		Log.d("mobileDomains","Activity::performCreate is called at "+Thread.intentEndTime);
< 		Thread.intentEndTime = System.nanoTime();
< 		Log.d("mobileDomains","Activity::performCreate logging ends at "+Thread.intentEndTime);
< 
< 		if (Thread.intentStartTime > 0 && Thread.intentCheckEndTime > 0) {
< 			long interval = Thread.intentEndTime - Thread.intentStartTime;
< 			long originCheckInterval = Thread.intentCheckEndTime - Thread.intentStartTime;
< 			Log.d("mobileDomains","Activity::Intent, runnining time="+interval+" ms,origin-check time="+originCheckInterval+" ms("+(originCheckInterval*100.0/interval)+"%)");
< 
< 			Thread.intentStartTime = 0;
< 			Thread.intentCheckEndTime = 0;
< 			Thread.intentEndTime = 0;
< 		}
< 
< 		//mobileDomains: set package name to the thread
< 		String pkgName = getPackageName();
< 		Log.d("mobileDomains","Activity::Thread.currentThread().setPackageName(pkgName="+pkgName+")");
< 		Thread.currentThread().getThreadGroup().setPackageName(pkgName);
< 
5160,5295d5113
< 
< 	//mobileDomains:
< 	private void performDomainChecks() {
< 		PackageManager pm = getPackageManager();
< 		if (mIntent != null && mIntent.getOrigin() == null) {
< 			if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::mIntent comes from system");
< 		}
< 		if (mIntent != null && mIntent.getOrigin() != null) { //mIntent is the intent which starts this activity. If it is null, it means no Intent starts the activity. If its origin is null, it means the intent was generated by Android system, so we don't need to check
< 			String senderOrigin = mIntent.getOrigin();
< 			String recipientOrigin = "app://"+getPackageName();
< 			String entryPoint = this.getClass().getSimpleName();
< 			if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::checking message from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint);
< 			if (!mActivityInfo.exported) { //it's accessing internal logic of the app. Note that mActivityInfo may be info
< 				//we enforce same origin policy here
< 				if (senderOrigin != recipientOrigin) {
< 					//todo: raise exception
< 					if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::messages from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint+" should be blocked according to recipient policy");
< 					return;
< 				}
< 			} else {
< 				String dataUri = mIntent.getDataString();
< 				if (mIntent.getAction() == Intent.ACTION_VIEW && dataUri != null) { //this is a scheme call
< 					entryPoint = Log.getSchmeAndHostFromURL(dataUri);
< 
< 					if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::handle receiving scheme. entryPoint="+entryPoint);
< 
< 					String allowedRecipientOrigins = mIntent.getAllowedRecipientOrigins();
< 					if (allowedRecipientOrigins != null) {
< 						pm.setOriginPolicy(PackageManager.SPECIFY_RECIPIENT_ORIGINS_SCHEME,senderOrigin,allowedRecipientOrigins,entryPoint);
< 						//mIntent.setAllowedRecipientOrigins(); //todo: figure out why this is not allowed
< 						mIntent.allowedRecipientOrigins = null;
< 					}
< 					if (mActivityInfo.allowedSenderOriginsForScheme.size() > 0) {
< 						for (String key: mActivityInfo.allowedSenderOriginsForScheme.keySet()) {
< 							String allowedSenderOrigins = mActivityInfo.allowedSenderOriginsForScheme.getString(key);
< 							pm.setOriginPolicy(PackageManager.SPECIFY_SENDER_ORIGINS_SCHEME,recipientOrigin,allowedSenderOrigins,key);
< 						}
< 						mActivityInfo.allowedSenderOriginsForScheme.clear(); //remove all elements
< 					}
< 
< 					if (!pm.checkOriginPolicy(PackageManager.CHECK_RECIPIENT_SCHEME,senderOrigin,recipientOrigin,entryPoint) || 
< 						!pm.checkOriginPolicy(PackageManager.CHECK_SENDER_SCHEME,senderOrigin,recipientOrigin,entryPoint)) { //policy check failed
< 						//todo: raise exception
< 						return;
< 					}
< 				} else { //this is an intent call
< 					if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::handle receiving Intent. entryPoint="+entryPoint);
< 					String allowedRecipientOrigins = mIntent.getAllowedRecipientOrigins();
< 					if (allowedRecipientOrigins != null) {
< 						pm.setOriginPolicy(PackageManager.SPECIFY_RECIPIENT_ORIGINS_INTENT,senderOrigin,allowedRecipientOrigins,entryPoint); //set recipient policy
< 						mIntent.setAllowedRecipientOrigins(null);
< 					}
< 					if (mActivityInfo.allowedSenderOrigins != null) { //policy exists
< 						pm.setOriginPolicy(PackageManager.SPECIFY_SENDER_ORIGINS_INTENT,recipientOrigin,mActivityInfo.allowedSenderOrigins,entryPoint); //set sender policy
< 						mActivityInfo.allowedSenderOrigins = null;
< 					}
< 
< 					if (!pm.checkOriginPolicy(PackageManager.CHECK_SENDER_INTENT,senderOrigin,recipientOrigin,entryPoint) || 
< 						!pm.checkOriginPolicy(PackageManager.CHECK_RECIPIENT_INTENT,senderOrigin,recipientOrigin,entryPoint)) { //policy check failed
< 						//todo: raise exception
< 						return;
< 					}
< 				}
< 			}
< 		}
< 	}
< 
< 	private boolean performDomainChecksOnIntent(Intent intent) {
< 		PackageManager pm = getPackageManager();
< 		if (intent != null && intent.getOrigin() == null) {
< 			if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::intent comes from system");
< 		}
< 		if (intent != null && intent.getOrigin() != null) { //intent is the one which is called in startActivity
< 			String senderOrigin = intent.getOrigin();
< 
< 			ResolveInfo ri = pm.resolveActivity(intent,PackageManager.MATCH_DEFAULT_ONLY);
< 			if (ri == null) {
< 				if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::cannot resolve the activity for the intent");
< 				return true;
< 			}
< 			String recipientOrigin = "app://" + ri.activityInfo.applicationInfo.packageName;
< 			String entryPoint = ri.activityInfo.name;
< 			if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::checking message from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint);
< 			if (!ri.activityInfo.exported) { //it's accessing internal logic of the app
< 				//we enforce same origin policy here
< 				if (senderOrigin.compareTo(recipientOrigin) != 0) {
< 					//todo: raise exception
< 					if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::messages from "+senderOrigin+" to "+recipientOrigin+":"+entryPoint+" should be blocked according to recipient policy");
< 					//return false;
< 					return true;
< 				}
< 			} else {
< 				String dataUri = intent.getDataString();
< 				if (intent.getAction() == Intent.ACTION_VIEW && dataUri != null) { //this is a scheme call
< 					entryPoint = Log.getSchmeAndHostFromURL(dataUri);
< 
< 					if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::handle receiving scheme. entryPoint="+entryPoint);
< 
< 					String allowedRecipientOrigins = intent.getAllowedRecipientOrigins();
< 					if (allowedRecipientOrigins != null) {
< 						pm.setOriginPolicy(PackageManager.SPECIFY_RECIPIENT_ORIGINS_SCHEME,senderOrigin,allowedRecipientOrigins,entryPoint);
< 						intent.allowedRecipientOrigins = null;
< 					}
< 					if (ri.activityInfo.allowedSenderOriginsForScheme.size() > 0) {
< 						for (String key: ri.activityInfo.allowedSenderOriginsForScheme.keySet()) {
< 							String allowedSenderOrigins = ri.activityInfo.allowedSenderOriginsForScheme.getString(key);
< 							pm.setOriginPolicy(PackageManager.SPECIFY_SENDER_ORIGINS_SCHEME,recipientOrigin,allowedSenderOrigins,key);
< 						}
< 						ri.activityInfo.allowedSenderOriginsForScheme.clear(); //remove all elements
< 					}
< 
< 					if (!pm.checkOriginPolicy(PackageManager.CHECK_RECIPIENT_SCHEME,senderOrigin,recipientOrigin,entryPoint) || 
< 						!pm.checkOriginPolicy(PackageManager.CHECK_SENDER_SCHEME,senderOrigin,recipientOrigin,entryPoint)) { //policy check failed
< 						return false;
< 					}
< 				} else { //this is an intent call
< 					if (Thread.debugForMobileDomains) Log.d("mobileDomains","Activity::handle receiving Intent. entryPoint="+entryPoint);
< 					String allowedRecipientOrigins = intent.getAllowedRecipientOrigins();
< 					if (allowedRecipientOrigins != null) {
< 						pm.setOriginPolicy(PackageManager.SPECIFY_RECIPIENT_ORIGINS_INTENT,senderOrigin,allowedRecipientOrigins,entryPoint); //set recipient policy
< 						intent.setAllowedRecipientOrigins(null);
< 					}
< 					if (ri.activityInfo.allowedSenderOrigins != null) { //policy exists
< 						pm.setOriginPolicy(PackageManager.SPECIFY_SENDER_ORIGINS_INTENT,recipientOrigin,ri.activityInfo.allowedSenderOrigins,entryPoint); //set sender policy
< 						ri.activityInfo.allowedSenderOrigins = null;
< 					}
< 
< 					if (!pm.checkOriginPolicy(PackageManager.CHECK_SENDER_INTENT,senderOrigin,recipientOrigin,entryPoint) || 
< 						!pm.checkOriginPolicy(PackageManager.CHECK_RECIPIENT_INTENT,senderOrigin,recipientOrigin,entryPoint)) { //policy check failed
< 						return false;
< 					}
< 				}
< 			}
< 		}
< 		return true;
< 	}
